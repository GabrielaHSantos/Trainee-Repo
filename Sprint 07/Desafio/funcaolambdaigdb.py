import json
import boto3
import requests
import os
import time
from datetime import datetime

# Configura√ß√µes
CLIENT_ID = os.getenv('IGDB_CLIENT_ID')  # Client ID da IGDB
ACCESS_TOKEN = os.getenv('IGDB_ACCESS_TOKEN')  # Access Token da IGDB
BUCKET_S3 = "data-lake-sprint6"  # Nome do bucket S3
CLIENTE_S3 = boto3.client('s3')

# Lista completa de jogos Pok√©mon
pokemon_games = [
    "Pok√©mon Red", "Pok√©mon Blue", "Pok√©mon Green", "Pok√©mon Yellow", "Pok√©mon Gold", 
    "Pok√©mon Silver", "Pok√©mon Crystal", "Pok√©mon Ruby", "Pok√©mon Sapphire", "Pok√©mon Emerald", 
    "Pok√©mon FireRed", "Pok√©mon LeafGreen", "Pok√©mon Diamond", "Pok√©mon Pearl", "Pok√©mon Platinum", 
    "Pok√©mon HeartGold", "Pok√©mon SoulSilver", "Pok√©mon Black", "Pok√©mon White", "Pok√©mon Black 2", 
    "Pok√©mon White 2", "Pok√©mon X", "Pok√©mon Y", "Pok√©mon Omega Ruby", "Pok√©mon Alpha Sapphire", 
    "Pok√©mon Sun", "Pok√©mon Moon", "Pok√©mon Ultra Sun", "Pok√©mon Ultra Moon", 
    "Pok√©mon Let's Go Pikachu", "Pok√©mon Let's Go Eevee", "Pok√©mon Sword", "Pok√©mon Shield", 
    "Pok√©mon Legends: Arceus", "Pok√©mon Brilliant Diamond", "Pok√©mon Shining Pearl", 
    "Pok√©mon Scarlet", "Pok√©mon Violet", "Pok√©mon GO",
    "Pok√©mon Mystery Dungeon: Red Rescue Team", "Pok√©mon Mystery Dungeon: Blue Rescue Team", 
    "Pok√©mon Mystery Dungeon: Explorers of Time", "Pok√©mon Mystery Dungeon: Explorers of Darkness", 
    "Pok√©mon Mystery Dungeon: Explorers of Sky", "Pok√©mon Mystery Dungeon: Gates to Infinity", 
    "Pok√©mon Mystery Dungeon: Rescue Team DX", "Pok√©mon Super Mystery Dungeon",
    "Pok√©mon Colosseum", "Pok√©mon XD: Gale of Darkness", "Pok√©mon Battle Revolution", 
    "Pok√©mon Stadium", "Pok√©mon Stadium 2", "Pok√©mon Rumble", "Pok√©mon Rumble Blast", 
    "Pok√©mon Rumble U", "Pok√©mon Rumble World", "Pok√©mon Rumble Rush", 
    "Pok√©mon Trozei!", "Pok√©mon Battle Trozei", "Pok√©mon Shuffle", 
    "Pok√©mon Quest", "Pok√©mon Caf√© ReMix", "Pok√©mon Snap", "New Pok√©mon Snap", 
    "Pok√©mon Pinball", "Pok√©mon Pinball: Ruby & Sapphire", "Pok√©mon Trading Card Game", 
    "Pok√©mon Trading Card Game 2", "Pok√©mon Art Academy", 
    "Detective Pikachu", "Detective Pikachu Returns", "Pok√©mon Ranger", "Pok√©mon Ranger: Shadows of Almia", 
    "Pok√©mon Ranger: Guardian Signs", "Pok√©mon Dash", "Pok√©mon Channel", "Pok√©mon Conquest", 
    "Pok√©mon Masters EX", "Pok√©mon UNITE"
]

# Headers para autentica√ß√£o na API IGDB
headers = {
    "Client-ID": CLIENT_ID,
    "Authorization": f"Bearer {ACCESS_TOKEN}"
}

def buscar_datas_lancamento():
    """Busca as datas de lan√ßamento dos jogos Pok√©mon na API IGDB."""
    games_data = []

    for game in pokemon_games:
        print(f"üîé Buscando {game}...")
        query = f'search "{game}"; fields name, first_release_date; limit 50;'
        response = requests.post("https://api.igdb.com/v4/games", headers=headers, data=query)

        if response.status_code == 200:
            game_info = response.json()
            if game_info:
                for entry in game_info:
                    name = entry.get("name", "")
                    release_date = entry.get("first_release_date", None)
                    
                    if game.lower() in name.lower() and release_date:
                        release_date = datetime.utcfromtimestamp(release_date).strftime('%Y-%m-%d')
                        year = int(release_date[:4])
                        if 1996 <= year <= 2022:
                            games_data.append({"game": game, "release_date": release_date})
                            print(f"‚úÖ {game} - {release_date}")
                            break
            else:
                print(f" {game} n√£o encontrado.")
        else:
            print(f" Erro na API: {response.status_code}")
            print(f"Resposta da API: {response.text}")

        time.sleep(1)

    return games_data

def salvar_no_s3(dados):
    """Salva os dados no S3 em formato JSON."""
    agora = datetime.utcnow()
    caminho_base = f"Raw/IGDB/JSON/{agora.strftime('%Y/%m/%d')}/"
    nome_arquivo = "pokemon_games_release_dates.json"

    CLIENTE_S3.put_object(
        Bucket=BUCKET_S3,
        Key=caminho_base + nome_arquivo,
        Body=json.dumps(dados, indent=4, ensure_ascii=False),
        ContentType="application/json"
    )

    return caminho_base + nome_arquivo

def lambda_handler(event, context):
    """Fun√ß√£o principal do Lambda."""
    print("Iniciando a busca de datas de lan√ßamento dos jogos Pok√©mon...")

    dados_jogos = buscar_datas_lancamento()

    if dados_jogos:
        caminho_arquivo = salvar_no_s3(dados_jogos)
        print(f" Dados salvos em: s3://{BUCKET_S3}/{caminho_arquivo}")

    return {
        "statusCode": 200,
        "mensagem": f"Ingest√£o conclu√≠da! Processados {len(dados_jogos)} jogos Pok√©mon."
    }
